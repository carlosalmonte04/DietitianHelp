<%= stylesheet_link_tag 'fullcalendar' %>
<link href="https://fonts.googleapis.com/icon?family=Material+Icons"
      rel="stylesheet">
      <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
      <link href="https://fonts.googleapis.com/css?family=Lato" rel="stylesheet">
    <div id="content" class="content">
        </div>
        <div class="col-lg-6">
          <div id="calendar" class="fc-calendar box-shadow"></div>
        </div>


    <%= javascript_include_tag 'jquery.flot' %>
      <%= javascript_include_tag 'jquery.flot.resize' %>
      <%= javascript_include_tag 'curvedLines' %>
      <%= javascript_include_tag 'jquery.flot.orderBars' %>
<!-- DATA TABLES-->
      <%= javascript_include_tag 'jquery.dataTables' %>
      <%= javascript_include_tag 'dataTables.responsive' %>
      <%= javascript_include_tag 'dataTables.tableTools' %>
      <%= javascript_include_tag 'moment.min' %>

      <%= javascript_include_tag 'fullcalendar' %>

      <!-- INITIALIZE CALENDAR () -->
    <script>
    <% to_do_today = [] %>
    toDoToday = []
    toDoTodayCount = 0
    $(function () {

      $(".event-tag span").click(function () {
        $(".event-tag span").removeClass("selected");
        $(this).addClass("selected");
      });

      $(document).on('click', '.remove-event', function (e) {
        $(this).parent().remove();
      });


      /* initialize the calendar */
      var date = new Date();
      var d = date.getDate();
      var m = date.getMonth();
      var y = date.getFullYear();
      $('#calendar').fullCalendar({
        header: {
          left: 'prev, next',
          center: 'title',
          right: 'today, month,agendaWeek,agendaDay'
        },
        //Add Events
        // FETCHING FROM ALL USER'S CLIENTS --- ATOMATICALLY ADDS 5 DAYS TO NEXTEVALUATIONNOTE_DATE TO = ENDDATE IN CALENDAR
        events: [<% if Nextevaluationnote.where(user_id: current_user.id).all.count === 0 %>
        <%= raw "" %>
        <% else %>
        <% Nextevaluationnote.where(user_id: current_user.id).map do |x| %>
        <% start_date = x.nnote_date.to_s.split("-").map(&:to_i).reduce(:+) %>
        // DUPLICATED END DATE FOR RANGE NEEDED TO PUSH ALL ASSESSMENTS THAT ARE DUE 
        <% end_date_for_rage = x.nnote_date.to_s.split("-").map(&:to_i).reduce(:+)%>
        <% end_date = x.nnote_date.to_s.split("-").map(&:to_i)%>
        <% end_date[2] = end_date[2] + 5 %>
        <%= raw "{
        title: '#{Client.find(x.client_id).firstname.to_s} #{Client.find(x.client_id).lastname.to_s}'," %>
        <%= raw "start:" + ' new Date(' + x.nnote_date.to_s.split("-").map(&:to_i).join(", ") + ")," %>
      <%= raw "end:" + ' new Date(' + end_date.join(", ") + ")," %>
      <%= raw "className:" + "'red-bg' 
            },"%>
            <% [start_date..end_date_for_rage].include?(Date.current.to_s.split("-").map(&:to_i).reduce(:+)) ? to_do_today << (Client.where(client_id: x.client_id).firstname.to_s + " " + Client.where(client_id: x.client_id).firstname.to_s) : 0 %>
      <% end %>
      <% end %>],

        editable: true,
        eventLimit: true,
        droppable: true, // this allows things to be dropped onto the calendar
        drop: function (date, allDay) { // this function is called when something is dropped

          // retrieve the dropped element's stored Event Object
          var originalEventObject = $(this).data('eventObject');

          // we need to copy it, so that multiple events don't have a reference to the same object
          var copiedEventObject = $.extend({}, originalEventObject);

          // assign it the date that was reported
          copiedEventObject.start = date;
          copiedEventObject.allDay = allDay;

          // render the event on the calendar
          // the last `true` argument determines if the event "sticks" (http://arshaw.com/fullcalendar/docs/event_rendering/renderEvent/)
          $('#calendar').fullCalendar('renderEvent', copiedEventObject, true);

          // is the "remove after drop" checkbox checked?
          if ($('#drop-remove').is(':checked')) {
            // if so, remove the element from the "Draggable Events" list
            $(this).remove();
          }

        }

      });

      /*Add new event*/
      // Form to add new event

      $("#add_event_form").on('submit', function (ev) {
        ev.preventDefault();

        var $event = $(this).find('.new-event-form'),
          event_name = $event.val(),
          tagColor = $('.event-tag  span.selected').attr('data-tag');

        if (event_name.length >= 3) {

          var newid = "new" + "" + Math.random().toString(36).substring(7);
          // Create Event Entry
          $("#external-events .checkbox").before(
            '<div id="' + newid + '" class="fc-event ' + tagColor + '" data-bg="' + tagColor + '">' + event_name + '<span class="fa fa-close remove-event"></span></div>'
          );


          var eventObject = {
            title: $.trim($("#" + newid).text()),
            className: $("#" + newid).attr("data-bg"), // use the element's text as the event title
            stick: true
          };

          // store the Event Object in the DOM element so we can get to it later
          $("#" + newid).data('eventObject', eventObject);

          // Reset draggable
          $("#" + newid).draggable({
            revert: true,
            revertDuration: 0,
            zIndex: 999
          });

          // Reset input
          $event.val('').focus();
        } else {
          $event.focus();
        }
      });
    });
$(document).ready(function() {
  top.$("#processingViewModal").iziModal('close')
  top.$('#clientload').fadeIn();
});
  </script>